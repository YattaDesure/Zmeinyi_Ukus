#1 lab
5.1 Запросить у пользователя ввод двух целых чисел a и b. Реализовать вывод
результата выполнения арифметических операций (сложение, вычитание,
умножение, деление, получение целой части от деления, остаток от деления,
возведение в степень), минимальное и максимальное из чисел. Дополнительные
переменные не использовать. 
Пример (при a = 6, b=4):
a + b = 10
a – b = 2
a * b = 24
…
min = 4
max = 6
5.2 Изучить варианты форматирования строк с использованием функции format.
Реализовать вывод для задания 2 в следующем виде, используя один вызов функции
format() (например, при a = 6, b=4):
6 + 4 = 10
6 – 4 = 2
6 * 4 = 24
…
4
5.3 Запросить у пользователя ввод двух чисел a и b. Реализовать вывод
случайного вещественного числа в диапазоне от a до b, подключив модуль random.
5.4 Запросить у пользователя ввод целого числа. Реализовать вывод этого числа
в двоичной, восьмеричной, десятичной и шестнадцатиричной системах счисления
различными способами (с использованием форматирования строк и
специализированных методов).
5.5 Запросить у пользователя ввод вещественного числа, реализовать его
округление:
- до трех знаков после запятой, используя метод format,
- до N знаков после запятой, используя метод round (N должно вводиться
пользователем).
5.6 Запросить у пользователя ввод года, реализовать вывод True или False в
зависимости от того, високосный год введен или нет (год является високосным в
двух случаях: либо он кратен 4, но при этом не кратен 100, либо кратен 400).
5.7 Написать программу, обменивающую значения двух целых чисел (значения
чисел вводятся с клавиатуры пользователем).
5.8 Запросить у пользователя ввод целого числа n (количество секунд,
прошедшее с начала суток). Определите, сколько часов, минут и секунд будет
показано на табло электронных часов, результат вывести в формате чч:мм:сс.
Учесть, что число n может быть больше, чем количество секунд в сутках, но
результат должен корректно выводиться (для этого отбрасывать количество секунд в
сутках).



#2

5.1 Написать программу, вычисляющую значение функции у(x) с округлением
до трех знаков после запятой:
– у(х) = π*х2
, если х < -10;
– у(х) = х4
, если -10 ≤ х < -5;
– у(х) = e*|х|, если -5 ≤ х < 10;
– у(х) = 1/sin(√х), если х ≥ 10.
5.2 Запросить у пользователя ввод трех чисел. Вывести на экран то из них,
которое находится между двумя другими. При выполнении использовать цепочки
сравнения и тернарный оператор (трехместный if). 
5.3 Написать программу, определяющую по году и номеру месяца, сколько дней
в месяце (с учетом високосных лет). Год является високосным, если он кратен 4 и не
кратен 100 или если он кратен 400. При выполнении использовать тернарный
оператор (трехместный if). 
5.4 Запросить у пользователя ввод трех чисел. Вывести на экран информацию о
том, можно ли построить треугольник со сторонами указанной длины и его тип
(прямоугольный, равнобедренный, равносторонний), если построение возможно. 
5.5 Запросить у пользователя два целых числа и битовую операцию (и, или,
исключающее или, сдвиг влево, сдвиг вправо), исходные числа и результат
выполнения операции в двоичном виде вывести на экран.

#3

5.1 Написать программу, генерирующую случайное целое число от 1 до 1000 и
выводящую на экран само число и ответ, является ли оно простым. При выполнении
использовать цикл for.
5.2 Написать программу, загадывающую случайное число от 1 до 10.
Пользователь пытается угадать загаданное число. Если угадал, сообщить, что он
молодец. Если ввел число меньше или больше загаданного, вывести на экран
соответствующую надпись и требовать повторный ввод.
5.3 Написать программу для перевода температуры по Цельсию в температуру
по Фаренгейту от 100 до 0 градусов с шагом 10. Формула перевода: F=C·1.8+32. При
выполнении использовать цикл for.
5.4 Написать программу, запрашивающую сумму покупки и внесенную
покупателем сумму. Если сумма покупки меньше или равна 0, требовать повторить
ввод суммы покупки. Если внесенная сумма меньше суммы покупки, сообщить об
этом, указав недостающую сумму, и потребовать повторить ввод.
После корректного ввода исходных данных, если сдача не требуется, выводить
на экран «Спасибо!»; если внесена сумма больше необходимой – «Возьмите сдачу»
и указывать сумму сдачи.
5.5 Вывести N значений функции y(х)=ax+b на отрезке от x1 до x2 (N, a, b, x1 и
x2 вводятся пользователем. Все числа кроме N – вещественные). 
Если х1 больше х2, то значения функции выводить по убыванию, иначе – по
возрастанию. Результат округлять до трех знаков после запятой. Значения функции
на концах отрезка (у(х1) и у(х2)) также должны быть выведены.

#4

5.1 Запросить у пользователя количество элементов списка. Заполнить список
случайными целыми числами от 0 до 100. Построчно вывести каждый элемент
списка с указанием его индекса.
5.2 Запросить у пользователя количество элементов списка. Создать новый
список, который должен заполнить пользователь. Вывести весь список одной
строкой.
5.3 Дописать в один из списков все четные элементы из другого списка.
Вывести полученный результат на экран одной строкой, разделенной пробелами (для
этого в цикле использовать print(список[i], end = " "))
5.4 Вывести на экран список, отсортированный по убыванию, не используя
циклы. 
5.5 Запросить у пользователя ввод числа. Вывести количество совпадений со
значениями элементов в списке и удалить все совпадения из списка, не используя
циклы.
5.6 Реализовать вставку в существующий и заполненный список n элементов. n,
индексы и значения указываются пользователем. Вывести полученный результат на
экран.
5.7 Создать словарь, содержащий код и название книги. Количество элементов,
ключи и значения вводятся пользователем. 
5.8 Для созданного словаря вывести на экран список ключей и список значений
словаря. Запросить у пользователя ключ и вывести значение словаря,
соответствующее указанному ключу.

#5

5.1 Запросить у пользователя строку:
- вывести строку на экран 5 раз, не используя циклы;
- вывести длину строки и каждый символ строки с указанием его индекса.
- вывести каждый второй символ строки на экран с указанием его позиции в
строке (не индекса).
5.2 Запросить у пользователя строку и два числа (начальная и конечная
позиции), вывести все символы находящиеся в диапазоне между двумя указанными
позициями.
5.3 Запросить у пользователя строку. Изменить первый и последний символы
строки на #.
5.4 Запросить у пользователя строку и вывести на экран информацию о том,
состоит ли строка только из цифр, только из букв, только из цифр и букв. Если
строка состоит только из букв дополнительно сообщить, только ли из строчных или
прописных букв она состоит.
5.5 Запросить у пользователя строку, разделить ее на набор подстрок
(разделитель: пробел). Объединить в новую строку все слова, встречающиеся в
исходной строке, через запятую.
5.6 Запросить у пользователя две строки. Определить, сколько раз встречается
первая строка во второй и вывести на экран номера позиций, с которых она
встречается.
5.7 Написать программу, определяющую, является ли введенное слово
палиндромом (т.е. одинаково читается справа налево и слева направо). Регистр
символов не должен учитываться.
5.8 Написать программу, заменяющую все двойные пробелы в строке на
одинарные (в результате выполнения программы в строке не должно остаться двух и
более подряд идущих пробелов).

#6

5.1 Разработать приложение, позволяющее найти частное чисел a и b. Числа
вводятся пользователем. Добавить перехват исключения, происходящего при
попытке деления на 0. Результат деления или сообщение о невозможности операции
(в зависимости от введенных данных) вывести на экран.
5.2 Разработать приложение, позволяющее найти частное чисел a и b. Числа
вводятся пользователем. Добавить перехват исключения, происходящего при
попытке деления на 0. В случае, если пользователь ввел 0, сообщить, что 0 вводить
нельзя, и требовать повторного ввода числа b, после того, как будет получено
корректное значение b в блоке finally выводить результат деления.
5.3 Разработать приложение, позволяющее корректно вычислить значение
следующего выражения:
√(x+y+z)/(x-y+z)
2
Числа вводятся пользователем. Добавить два перехватчика исключений (ввод
нечисловых данных и попытка деления на 0).
5.4 Модифицировать приложение, разработанное в п.3, так, чтобы в случае,
когда под корнем отрицательное число, при помощи raise генерировалось
исключение.
Пример генерации своего исключения:
try:
raise ValueError("Onиcaниe исключения")
except ValueError as msg:
print(msg) #Выведет: Описание исключения

#7

5.1 Написать и протестировать функцию, возводящую переданное в параметрах
число a в степень x. По умолчанию a должно быть равно 2. При реализации можно
использовать **. 
Функцию снабдить комментариями согласно следующему шаблону (описание
параметров дано в сигнатуре функции):
def названиеФункции(параметр1: ‘описание параметра 1’ = значение1,
параметр2: ‘описание параметра 2’ = значение2):
"""Комментарий к функции
"""
тело функции
5.2 Написать и протестировать функцию, рекурсивно вычисляющую факториал
числа. Если исходные данные некорректны (например, передана строка или
отрицательное число), возвращать -1. Стандартную функцию вычисления
факториала не использовать.
5.3 Написать и протестировать функцию, выводящую на экран сумму, среднее,
максимум, минимум и количество всех чисел, переданных через параметры.
5.4 Написать и протестировать функцию, изменяющую значения переданного в
нее списка путем умножения каждого из элементов списка на переданное в
параметрах число. Если второй параметр отсутствует, умножать на -1.
5.5 Написать и протестировать лямбда-функцию, вычисляющую значение
y=a*x+b.

#8

Требуется создать модуль, содержащий следующие функции:
5.1 Функцию hello, выводящую «Hello, World» или «Hello, имя», если в нее
передан параметр.
5.2 Функцию arithmetic, принимающую 3 аргумента: первые два - числа, третий
- операция, которая должна быть произведена над ними. Если третий аргумент +,
сложить их; если -, то вычесть; * - умножить; / - разделить (первое на второе). В
остальных случаях вернуть строку “Неизвестная операция”.
5.3 Функцию square, принимающую 1 аргумент – сторону квадрата, и
возвращающую 3 значения (с помощью кортежа): периметр квадрата, площадь
квадрата и диагональ квадрата.
5.4 Функцию season, принимающую 1 аргумент – номер месяца (от 1 до 12), и
возвращающую время года, которому этот месяц принадлежит (зима, весна, лето или
осень).
5.5 Функцию bank, принимающая аргументы a и years, и возвращающую сумму,
которая будет на счету пользователя. Пользователь делает вклад в размере a рублей
сроком на years лет под 10% годовых (каждый год размер его вклада увеличивается
на 10%. Эти деньги прибавляются к сумме вклада, и на них в следующем году тоже
будут проценты)

#9

5.1 Создать класс Автор с полями ФИО, страна. Добавить в класс метод,
выводящий на экран информацию об авторе. В основной программе создать список
из N авторов. Исходные данные вводятся пользователем. Вывести список всех
авторов и список только русских авторов на экран.
5.2 Создать класс Книга у которого должны быть:
- приватное поле содержание (список произведений книги, который должен
быть изначально пустым);
- конструктор __init__, который создает поле названиеКниги, меняет его
значение на значение, переданное в параметрах конструктора, и выводит на экран
сообщение «книга название создана»;
- деструктор __del__, который выводит на экран сообщение «книга название
удалена».
5.3 В классе книга создать следующие методы:
- метод, добавляющий переданное в параметрах название произведения в
содержание книги;
- метод, возвращающий количество произведений, имеющихся в книге.
5.4 В классе Книга создать метод, выводящий на экран информацию о книге в
следующей форме:
Книга: название книги
Содержание:
1) название1
2) название2
…
5.5 Создать класс КнигаАвтора, являющийся наследником классов Автор и
Книга. Добавить в класс метод, выводящий на экран ФИО автора и название книги и
содержание книги.

#10

5.1 Составить тестовые наборы данных для скриптов, разработанных на
практическом занятии №2. Оформить тестовые наборы в виде таблиц.
5.2 Запуск пошаговой отладки в Python IDLE
5.2.1 Написать скрипт, в котором пользователь вводит число n. После ввода
скрипт должен выполнять вычисление факториала числа n и выводить результат на
экран.
n = int(input("n="))
fact = 1
for x in range(2, n+1):
 fact = fact*x
print(fact)
5.2.2 Включить отладчик в Python Shell (меню Debug – Debugger). После
включения откроется окно Debug Control, в интерпретаторе появится сообщение о
включении отлачика [DEBUG ON] (при закрытии отладчика появится сообщение
[DEBUG OFF]).
В окне Debug Control отметить все флажки.
5.2.3 Запустить скрипт из п.5.2.1 на пошаговое выполнение
Для того, чтобы выполнять пошаговую отладку без захода в функции
(стандартных функций int() и input()), нажать в отладчике Over.
Для того, чтобы выйти из функций, нажать в отладчике Out.
В ходе отладки изучить изменение значений переменных в окне отладчика.
5.3 Создание и применение брейпоинтов в Python IDLE
5.3.1 Включить отладчик в Python Shell (меню Debug – Debugger) и запустить
скрипт из п.5.2.1. 
5.3.2 Добавить в скрипт на строке fact = fact*x брейпоинт (ПКМ – Set
Breakpoint)
5.3.3 Запустить скрипт из п.5.2.1 на пошаговое выполнение
Для того, чтобы переходить по брейкпоинтам, нажать в отладчике Go.
В ходе отладки изучить изменение значений переменных в окне отладчика.
5.4 Запуск пошаговой отладки с заходом в функции в Python IDLE
5.4.1 Изменить код скрипта из п.5.2.1, добавив в него функцию, вычисляющую
в цикле значение факториала числа n. После описания функции выполнить ее вызов.
5.4.2 Включить отладчик в Python Shell (меню Debug – Debugger) и запустить
скрипт из п.5.4.1. 
5.4.3 Запустить скрипт из п.5.4.1 на пошаговое выполнение с заходом в
функцию вычисления факториала.
Для того, чтобы заходить в функции, нажать в отладчике Step.
Для того, чтобы досрочно вернуться из функции, нажать в отладчике Out.
В ходе отладки изучить изменение значений переменных в окне отладчика.
5.5 Провести отладку приложения на языке Python, содержащего цикл для
вычисления факториала, используя встроенный интерактивный отладчик pdb.
Запуск отладчика осуществить через интерактивный интерпретатор.
Для подключения отладчика нужно импортировать pdb.
Для вызова отладчика в определнной строке программы нужно написать:
pdb.set_trace() 
При достижении этой строки в интерпретаторе будет отображаться текущая
строка скрипта и строка (Pdb), в которой можно задать настройки отладчика pdb.
Например, для вывода переменной, нужно написать ее название.
Для выполнения следующего шага требуется написать step, для выхода – exit.

#11

5.1 Написать регулярное выражение, разделяющее строку на предложения и
вывести каждое предложение с новой строки. Признак конца предложения: точка,
вопросительный знак, восклицательный знак, многоточие.
Для разделения строки на список использовать:
re.split(r'паттерн', строка)
5.2 Написать регулярное выражение, заменяющее слова «редиска» и фразу
«нехороший человек» (и то и другое в любых склонениях и числе) на текст
«*давайте жить дружно*». 
Для замены подстроки на новую подстроку использовать:
re.sub(r'паттерн', 'новая подстрока', строка)
5.3 Написать регулярное выражение, выделяющее из строки все даты в формате
дд.мм.гггг и выводящее их на экран. Вместо дд и мм может быть от 1 до 2 чисел,
вместо гггг 2 или 4 числа. Месяц может быть от 1 до 12, день может быть от 1 до 31.
Для возврата списка всех совпадений использовать:
re.findall(r'паттерн', строка)
5.4 Написать регулярное выражение (или набор регулярных выражений),
проверяющее, является ли введенная строка надежным паролем. Требования к
паролю: длина от 6 символов, обязательно наличие цифры, строчной и прописной
буквы латинского алфавита. Если требования не выполнены, запрашивать
повторный ввод до тех пор, пока пароль не будет соответствовать требованиям.
Для определения, есть ли в строке определнный текст, использовать:
re.search(r'паттерн', строка)

#12

В работе обязательно выполнять проверку существования файлов и папок и
обрабатывать исключения.
5.1 Написать программу, выводящую на экран содержимое файла, название
которого ввел пользователь. Если название файла заканчивается на .py, после вывода
его содержимого выполнять скрипт, содержащийся в этом файле, используя
функцию exec(текст скрипта).
Для получения расширения использовать:
os.path.splitext(path) - разбивает путь на пару (root, ext), где ext начинается с
точки и содержит не более одной точки.
5.2 Написать программу, позволяющую записать введенный пользователем
текст в файл (каждая введенная строка должна записываться с новой строки в конец
файла). Признак конца ввода – введенная пользователем строка end. Перед началом,
если файл существует, запросить у пользователя информацию, нужно дописать или
перезаписать файл.
5.3 Написать программу, запрашивающую у пользователя имя исходного файла
и предлагающую три операции: вывод содержимого файла на экран, удаление файла,
переименование файла. Если файл требуется переименовать, запрашивать новое имя
файла.
5.4 Написать программу, удаляющую все файлы с расширением .txt в указанной
пользователем директории и всех ее поддиректориях.
Для получения списка поддиректорий и файлов использовать:
os.walk(каталог) - возвращает кортеж (каталог, подкаталоги, файлы)
5.5 Написать программу, записывающую в файл список поддиректорий и
файлов указанной папки. В файле у каждой поддиректории и файла указать их
размер в килобайтах.
Для определения размера файлов использовать:
os.path.getsize(path) - размер файла в байтах.

#13

дание
5.1 Разработать приложение, позволяющее считывать и модифицировать
информацию в xml-файле, используя пакет xml.
5.2 Разработать приложение, позволяющее создавать и модифицировать wavфайл, используя модуль wave.
5.3 Разработать приложение, позволяющее считывать и модифицировать
информацию в таблицах базы данных SQLite, используя DB API.


#14

5.1 Создать оконное приложение «Форма авторизации» с однострочными
полями Логин, Пароль, флажком «Запомнить пароль», подписями и кнопкой
Авторизоваться. Настроить размер формы 200х300 и заголовок окна.
5.2 Создать оконное приложение «Форма регистрации» со следующими
элементами и подписями:
- однострочные поля Логин, Пароль,
- многострочное поле О себе,
- переключатели для указания пола,
- список из пяти пунктов для выбора материка,
- кнопка Зарегистрироваться. 
Настроить цвет фона формы и элементов управления и заголовок окна.
5.3 Создать оконное приложение, в котором связать виджеты поле ввода,
флажок, переключатель с ассоциированными переменными-объектами (IntVar,
StringVar и т.д.) и, используя textvariable, определить текст-содержимое или текстнадпись виджетов. Написать скрипт, в котором значения ассоциированных
переменных должны отображаться в метке через запятую.
5.4 Создать приложение с меню, содержащим два пункта: Color и Size. Пункт
Color должен содержать три команды (Red, Green и Blue), меняющие цвет рамки на
главном окне. Пункт Size должен содержать две команды (500x500 и 700х400),
изменяющие размер рамки. Привязать к пунктам меню «горячие клавиши» и
выполнение функций.

#15
5.1 Написать оконное приложение, в которое добавить многострочное поле
ввода и кнопку Сохранить. При нажатии на кнопку или клавиши Ctrl-S должно
происходить открытие окна, позволяющего сохранить текст в файл. При нажатии
Esc форма должна закрываться.
5.2 Написать оконное приложение с тремя полями ввода. При нажатии на любое
из полей ввода левой кнопкой мыши в метку на форме должно выводиться название
активного поля ввода, при нажатии правой – в консоль. Для реализации подписки на
событие использовать root.bind_class.
5.3 Написать оконное приложение, на котором разместить метку с подписью
«Координаты мыши». При движении мыши выводить в метку координаты х и у
мыши (для этого в обработчике движения мыши есть свойства event.x, event.y).
5.4 Написать оконное приложение, на котором разместить метку с подписью
«Нажатые клавиши». При нажатии любой из клавиш добавлять в метку последний
нажатый символ (для этого в обработчике Key есть свойства event.char).

#16

5.1 Создание клиент-серверного сетевого приложения
5.1.1 Создание скрипта сервера
# Код сервера, принимающего подключение по порту 50007 
# и пересылающего полученные данные отправителю
import socket
HOST = '' # Слушать все интерфейсы
PORT = 50007 # Порт, который необходимо слушать
# Создание интернет-сокета для использования по протоколу TCP
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# прослушивание всех интерфейсов на порту PORT
s.bind((HOST, PORT))
# Перевод сокета в режим ожидания. Параметр – количество одновременных
# соединений (1 означает, что может быть одно соединение одновременно)
s.listen(1)
# ожидание соединения от клиента
conn, addr = s.accept()
print('Подключен клиент: ', addr) # addr – ip и номер порта клиента
# в цикле выполняется чтение данных от клиента 
while True:
 # Считывание данных от клиента по 1024 байта
 data = conn.recv(1024) 
 if not data:
 break
 # вывод текста в кодировке UTF-8
 print('Получено сообщение:', data.decode('utf-8')) 
 # Отправка считанных данных обратно клиенту
 conn.sendall(data)
# Закрытие соединения
conn.close()
5.1.2 Создание скрипта клиента
# Код клиента, подключающегося к локальному серверу по порту 50007 
# и пересылающего полученные данные отправителю
import socket
HOST = 'localhost' # Имя сервера, к которому требуется подключиться
PORT = 50007 # Номер порта на сервере
# Создание интернет-сокета для использования по протоколу TCP
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# Соединение с сервером
s.connect((HOST, PORT)) 
# отправка серверу байтовой строки 
# (для преобразования в байты используется функция encode())
s.sendall('Hello, world'.encode())
# Прием от сервера данных
data = s.recv(1024) 
# Закрытие соединения
s.close() 
# Вывод на экран полученных данных
print('Сообщение сервера: ', repr(data))
5.1.3 Запустить для каждого скрипта свою копию IDLE (нужно для того, чтобы
они работали в различных потоках) и осуществить сначала запуск сервера, потом
запуск клиента.
5.2 Создание общего чата
5.2.1 Изменить код клиента следующим образом:
- убрать вывод строки, полученной с сервера;
- в бесконечном цикле запрашивать у пользователя ввод сообщения, которое
должно отправляться на сервер;
- при вводе клиентом строки end работа клиента завершается.
5.2.2 Изменить код сервера следующим образом:
- реализовать постоянное прослушивание подключений (для этого добавить
после s.listen(1) бесконечный цикл и перенести в него весь код, который написан
после s.listen(1));
- убрать пересылку сообщения клиенту и вывод сообщения о том, что клиент
подключился к серверу;
- реализовать вывод в командной строке полученных данных следующим
образом "дата и время (адрес клиента): сообщение".
Для вывода даты и времени использовать следующий код: 
from datetime import datetime
datetime.strftime(datetime.now(), "%Y.%m.%d %H:%M:%S")
5.2.3 Протестировать, запустив сервер и несколько клиентов
5.3 Создание общего чата с информированием о том, какие пользователи
подключились и какой пользователь отправил сообщение
5.3.1 Изменить код клиента следующим образом:
- при запуске клиента запрашивать логин и отправлять его на сервер при
подключении;
- в бесконечном цикле запрашивать у пользователя ввод сообщения и
отправлять логин и сообщение серверу.
5.3.2 Изменить код сервера следующим образом: 
- при подключении клиента должно выводиться сообщение «подключился
логин» (логин д.б. тот, что указал клиент при подключении);
- реализовать вывод в командной строке полученных данных следующим
образом "дата и время логин: сообщение".
5.3.3 Протестировать, запустив сервер и несколько клиентов
5.4 Создание оконного клиента
5.4.1 Создать оконное клиентское приложение с кнопкой "Отправить" и двумя
полями ввода (логин и сообщение). При нажатии на кнопку "Отправить"
приложение должно действовать аналогично клиенту из п.5.3. 
5.4.2 Протестировать, запустив сервер из п.5.3 и несколько оконных клиентов


#17

адание
5.1 Подключить к программе на Python модуль, написанный на С.
Протестировать их взаимодействие.
5.2 Подключить к программе на С модуль, написанный на Python.
Протестировать их взаимодействие

#18

5.1 Разработать многопоточное приложение, содержащее семафоры.
5.2 Разработать многопоточное приложение, реализующее обмен сообщениями
между потоками, используя класс Event.
5.3 Разработать многопоточное приложение, реализующее обмен сообщениями
между потоками, используя класс Condition.
5.4 Разработать приложение c низкоуровневым доступом к потокам управления,
используя модуль thread.
